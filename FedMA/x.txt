{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# FedMA Implementation for LeNet\n",
    "\n",
    "This notebook implements FedMA exactly as in the original repository, tracing through all functions and dependencies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "import numpy as np\n",
    "import copy\n",
    "import logging\n",
    "from torchvision import datasets, transforms\n",
    "\n",
    "logging.basicConfig(level=logging.INFO)\n",
    "logger = logging.getLogger(__name__)\n",
    "\n",
    "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
    "print(f\"Using device: {device}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Helper Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pdm_prepare_freq(cls_freqs, n_classes):\n",
    "    freqs = []\n",
    "    for net_i in sorted(cls_freqs.keys()):\n",
    "        net_freqs = [0] * n_classes\n",
    "        for cls_i in cls_freqs[net_i]:\n",
    "            net_freqs[cls_i] = cls_freqs[net_i][cls_i]\n",
    "        freqs.append(np.array(net_freqs))\n",
    "    return freqs\n",
    "\n",
    "def pdm_prepare_full_weights_cnn(nets, device=\"cpu\"):\n",
    "    weights = []\n",
    "    for net_i, net in enumerate(nets):\n",
    "        net_weights = []\n",
    "        statedict = net.state_dict()\n",
    "        for param_id, (k, v) in enumerate(statedict.items()):\n",
    "            if device == \"cpu\":\n",
    "                if 'fc' in k or 'classifier' in k:\n",
    "                    if 'weight' in k:\n",
    "                        net_weights.append(v.numpy().T)\n",
    "                    else:\n",
    "                        net_weights.append(v.numpy())\n",
    "                elif 'conv' in k or 'features' in k:\n",
    "                    if 'weight' in k:\n",
    "                        _weight_shape = v.size()\n",
    "                        if len(_weight_shape) == 4:\n",
    "                            net_weights.append(v.numpy().reshape(_weight_shape[0], _weight_shape[1]*_weight_shape[2]*_weight_shape[3]))\n",
    "                    else:\n",
    "                        net_weights.append(v.numpy())\n",
    "            else:\n",
    "                if 'fc' in k or 'classifier' in k:\n",
    "                    if 'weight' in k:\n",
    "                        net_weights.append(v.cpu().numpy().T)\n",
    "                    else:\n",
    "                        net_weights.append(v.cpu().numpy())\n",
    "                elif 'conv' in k or 'features' in k:\n",
    "                    if 'weight' in k:\n",
    "                        _weight_shape = v.size()\n",
    "                        if len(_weight_shape) == 4:\n",
    "                            net_weights.append(v.cpu().numpy().reshape(_weight_shape[0], _weight_shape[1]*_weight_shape[2]*_weight_shape[3]))\n",
    "                    else:\n",
    "                        net_weights.append(v.cpu().numpy())\n",
    "        weights.append(net_weights)\n",
    "    return weights\n",
    "\n",
    "def compute_accuracy(net, dataloader, get_confusion_matrix=False, device=\"cpu\"):\n",
    "    net.eval()\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    if get_confusion_matrix:\n",
    "        confusion_matrix = torch.zeros(10, 10)\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        for batch_idx, (x, target) in enumerate(dataloader):\n",
    "            x, target = x.to(device), target.to(device)\n",
    "            out = net(x)\n",
    "            _, pred_label = torch.max(out.data, 1)\n",
    "            \n",
    "            total += x.data.size()[0]\n",
    "            correct += (pred_label == target.data).sum().item()\n",
    "            \n",
    "            if get_confusion_matrix:\n",
    "                for t, p in zip(target.view(-1), pred_label.view(-1)):\n",
    "                    confusion_matrix[t.long(), p.long()] += 1\n",
    "                    \n",
    "    if get_confusion_matrix:\n",
    "        return correct/float(total), confusion_matrix\n",
    "    \n",
    "    return correct/float(total)\n",
    "\n",
    "def block_patching(w_j, L_next, assignment_j_c, layer_index, model_meta_data, \n",
    "                  matching_shapes=None, layer_type=\"fc\", dataset=\"mnist\", network_name=\"lenet\"):\n",
    "    if assignment_j_c is None:\n",
    "        return w_j\n",
    "\n",
    "    layer_meta_data = model_meta_data[2 * layer_index - 2]\n",
    "    prev_layer_meta_data = model_meta_data[2 * layer_index - 2 - 2]\n",
    "\n",
    "    if layer_type == \"conv\":    \n",
    "        new_w_j = np.zeros((w_j.shape[0], L_next*(layer_meta_data[-1]**2)))\n",
    "        block_indices = [np.arange(i*layer_meta_data[-1]**2, (i+1)*layer_meta_data[-1]**2) for i in range(L_next)]\n",
    "        ori_block_indices = [np.arange(i*layer_meta_data[-1]**2, (i+1)*layer_meta_data[-1]**2) for i in range(layer_meta_data[1])]\n",
    "        for ori_id in range(layer_meta_data[1]):\n",
    "            new_w_j[:, block_indices[assignment_j_c[ori_id]]] = w_j[:, ori_block_indices[ori_id]]\n",
    "\n",
    "    elif layer_type == \"fc\":\n",
    "        if network_name == \"lenet\":\n",
    "            shape_estimator = LeNetContainer(num_filters=matching_shapes, kernel_size=5)\n",
    "\n",
    "        dummy_input = torch.rand(1, 1, 28, 28)\n",
    "        estimated_output = shape_estimator(dummy_input)\n",
    "        new_w_j = np.zeros((w_j.shape[0], estimated_output.view(-1).size()[0]))\n",
    "        logger.info(f\"estimated_output shape : {estimated_output.size()}\")\n",
    "        logger.info(f\"meta data of previous layer: {prev_layer_meta_data}\")\n",
    "        \n",
    "        block_indices = [np.arange(i*estimated_output.size()[-1]**2, (i+1)*estimated_output.size()[-1]**2) for i in range(L_next)]\n",
    "        ori_block_indices = [np.arange(i*estimated_output.size()[-1]**2, (i+1)*estimated_output.size()[-1]**2) for i in range(prev_layer_meta_data[0])]\n",
    "\n",
    "        for ori_id in range(prev_layer_meta_data[0]):\n",
    "            new_w_j[:, block_indices[assignment_j_c[ori_id]]] = w_j[:, ori_block_indices[ori_id]]\n",
    "\n",
    "    return new_w_j"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}